#+REVEAL_ROOT: ./src/reveal.js/
#+REVEAL_MATHJAX_URL: ./src/mathjax/es5/tex-chtml.js
#+REVEAL_HIGHLIGHT_CSS: %r/plugin/highlight/monokai.css
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_THEME: simple
#+REVEAL_DEFAULT_SLIDE_BACKGROUND: ./images/background_1.jpg
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./images/background_1.jpg
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+REVEAL_EXTRA_CSS: org.css
#+REVEAL_POSTAMBLE: <script>Reveal.configure({ hash:true });</script>
#+PROPERTY: header-args :noweb strip-export :exports both

#+NAME: mpl
#+begin_src python :exports none :results none
import matplotlib.pyplot as plt
plt.style.use("bmh")
plt.rcParams["savefig.transparent"] = True
#+end_src

#+TITLE: Fast Parallel Line Fitting with Astropy
#+AUTHOR: Stuart Mumford
#+REVEAL_TITLE_SLIDE: <h3>%t</h3>
#+REVEAL_TITLE_SLIDE: <h4>%a</h4>
#+REVEAL_TITLE_SLIDE: <div class="three-columns" style="align-items: center;"><a href="https://aperio.software"><img src='images/aperio.svg'/></a><a href="https://asttropy.org"><img src='images/astropy_logo_small.svg'/></a><a href="https://sunpy.org"><img src='images/sunpy.svg'/></a></div>

#+BEGIN_NOTES
Talk Objectives:

- Understand what Astropy Modeling is, and why it's useful
- Understand the performace penalty of fitting many spectra
- Understand how the   
#+END_NOTES

* Me
:PROPERTIES:
:CUSTOM_ID: me
:END:

#+REVEAL_HTML: <div class='two-columns'><div style="width: 66%;">

I have a PhD in numerical solar physics from Sheffield.

I've been Lead Developer of SunPy since ~2012

Now run Apeiro Software - A company doing Open Source software development for Astro and Solar Physics

#+REVEAL_HTML: <hr>
Find me online:

- [[https://cadair.com][cadair.com]]
- [[https://github.com/Cadair][@Cadair]] on GitHub
- [[https://matrix.to/#/@cadair:cadair.com][@cadair:cadair.com]] on Matrix
- [[https://mastodon.matrix.org/@Cadair][@cadair@nheko.io]] on Mastodon

#+REVEAL_HTML: </div><div>

#+attr_html: :width 100%
[[./images/cadair.jpg]]

#+REVEAL_HTML: </div></div>

#+BEGIN_NOTES
-  A year off in 2014 to finish my thesis.
#+END_NOTES

* Astropy Modeling
:PROPERTIES:
:CUSTOM_ID: astropy_intro
:END:

#+ATTR_REVEAL: :frag t
Astropy modeling is a framework for representing, evaluating and fitting models.

#+ATTR_REVEAL: :frag t
It's focus is on approachable code, expressively describing and evaluating the models.

#+ATTR_REVEAL: :frag t
It integrates well with astropy's physical units package.

** Quick Example
:PROPERTIES:
:CUSTOM_ID: model_example
:END:
#+BEGIN_NOTES
Talk though the code, but quickly.
#+END_NOTES

#+begin_src python :session initial-model :exports none
<<mpl>>
import numpy as np

fig = plt.figure(figsize=(10, 3))
#+end_src

#+RESULTS:

#+NAME: double_gaussian_setup
#+begin_src python :exports none :results none
import numpy as np
import astropy.units as u
import astropy.modeling.models as m

NIV_wave = 76.51 * u.nm
NeVIII_wave = 77.04 * u.nm

wave = np.linspace(start=76, stop=77.5, num=1000) * u.nm

initial_model = (
    m.Gaussian1D(amplitude=1*u.count, mean=NIV_wave, stddev=0.06 * u.nm) +
    m.Gaussian1D(amplitude=1*u.count, mean=NeVIII_wave, stddev=0.04 * u.nm)
)
#+end_src

#+begin_src python :results graphics file output :file ./images/generated/initial_model.svg :session initial-model :noweb yes
<<double_gaussian_setup>>

plt.plot(wave, initial_model(wave))
#+end_src

#+RESULTS:
[[file:./images/generated/initial_model.svg]]

* Approachable, but slow
:PROPERTIES:
:CUSTOM_ID: how_it_started
:END:

#+REVEAL_HTML: <div class="two-columns"><div>

[[file:./images/astropy_3670.png]]

#+REVEAL_HTML: </div><div>

[[file:./images/astropy_14610.png]]

#+REVEAL_HTML: </div>

#+BEGIN_NOTES
- The issue of being able to apply a non-linear fitter to a set of models has existed for a long time.
- For linear fitters the minima of all models is the minima of every model, not true for non-linear fitters.
- Therefore each non-linear fit needs to be evaluated independently.
#+END_NOTES


* Data Scale

* The Fix

** Benchmarking
  :PROPERTIES:
  :CUSTOM_ID: benchmarking
  :END:

# Setup the Fitter
#+NAME: fitting_setup
#+begin_src python :results none :eval never :exports none
from astropy.modeling import fitting

# Make some data with some noise
y = initial_model(wave)
y *= np.random.normal(0, 0.2, wave.shape)

# Fit the model to the data
fit_g = fitting.TRFLSQFitter()
#+end_src

# Build a timeit script, but don't evaluate it or export it
# We evaluate it in two differnent code blocks below with different venvs
#+NAME: run_timeit
#+begin_src python :results none :eval never :exports none :noweb yes
import timeit
import astropy

number_of_fits = 100

setup_script = """\
<<double_gaussian_setup>>
<<fitting_setup>>
"""

time_taken = min(timeit.repeat("fit_g(initial_model, wave, y)", setup=setup_script, number=number_of_fits, repeat=10))
print(f"Running {number_of_fits} fits with astropy {astropy.__version__} took {time_taken:1.5f}s")
#+end_src

# Export the timeit script to the slide in a pretty way
#+begin_src python :eval never :exports code :noweb yes
<<double_gaussian_setup>>
<<fitting_setup>>
<<fit_initial_model>>
#+end_src

# Run both versions of the timeit script
#+begin_src python :python .venv-before/bin/python :noweb yes :exports results :results output :eval no-export
<<run_timeit>>
#+end_src

#+RESULTS:
: Running 100 fits with astropy 6.1.0 took 1.69645s

#+begin_src python :noweb yes :exports results :results output :eval no-export
<<run_timeit>>
#+end_src

#+RESULTS:
: Running 100 fits with astropy 7.1.0 took 0.74003s
