#+REVEAL_ROOT: ./src/reveal.js/
#+REVEAL_MATHJAX_URL: ./src/mathjax/es5/tex-chtml.js
#+REVEAL_HIGHLIGHT_CSS: %r/plugin/highlight/monokai.css
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_THEME: simple
#+REVEAL_DEFAULT_SLIDE_BACKGROUND: ./images/background_1.jpg
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./images/background_1.jpg
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+REVEAL_EXTRA_CSS: org.css
#+REVEAL_POSTAMBLE: <script>Reveal.configure({ hash:true });</script>
#+PROPERTY: header-args :noweb strip-export :exports both

#+NAME: mpl
#+begin_src python :exports none :results none
import matplotlib.pyplot as plt
plt.style.use("bmh")
plt.rcParams["savefig.transparent"] = True
#+end_src

#+TITLE: Fast Parallel Line Fitting with Astropy
#+AUTHOR: Stuart Mumford, Thomas Robitaille, Terry Kucera
#+REVEAL_TITLE_SLIDE: <h3>%t</h3>
#+REVEAL_TITLE_SLIDE: <h4>%a</h4>
#+REVEAL_TITLE_SLIDE: <div class="three-columns" style="align-items: center;"><a href="https://aperio.software"><img src='images/aperio.svg'/></a><a href="https://asttropy.org"><img src='images/astropy_logo_small.svg'/></a><a href="https://sunpy.org"><img src='images/sunpy.svg'/></a></div>

#+BEGIN_NOTES
Talk Objectives:

- Understand what Astropy Modeling is, and why it's useful
- Understand the performace penalty of fitting many spectra
- Understand how contributing to upstream has helped everyone, **and made it easier to use**
#+END_NOTES

* Me
:PROPERTIES:
:CUSTOM_ID: me
:END:

#+BEGIN_NOTES
-  A year off in 2014 to finish my thesis.
#+END_NOTES

#+REVEAL_HTML: <div class='two-columns'><div style="width: 66%;">

I have a PhD in numerical solar physics from Sheffield.

I've been Lead Developer of SunPy since ~2012

Now run Apeiro Software - A company doing Open Source software development for Astro and Solar Physics

#+REVEAL_HTML: <hr>
Find me online:

- [[https://cadair.com][cadair.com]]
- [[https://github.com/Cadair][@Cadair]] on GitHub
- [[https://matrix.to/#/@cadair:cadair.com][@cadair:cadair.com]] on Matrix
- [[https://mastodon.matrix.org/@Cadair][@cadair@nheko.io]] on Mastodon

#+REVEAL_HTML: </div><div>

#+attr_html: :width 100%
[[./images/cadair.jpg]]

#+REVEAL_HTML: </div></div>

* Astropy Modeling
:PROPERTIES:
:CUSTOM_ID: astropy_intro
:END:

#+REVEAL_HTML: <div class='two-columns'><div style="width:80%;">
Astropy modeling is a framework for representing, evaluating and fitting models.

#+ATTR_REVEAL: :frag t
It's focus is on approachable code, expressively describing and evaluating the models.

#+ATTR_REVEAL: :frag t
It integrates well with astropy's physical units package.
#+REVEAL_HTML: </div><div>
[[file:./images/astropy_logo_small.svg]]
#+REVEAL_HTML: </div></div>

** Quick Example
:PROPERTIES:
:CUSTOM_ID: model_example
:END:
#+BEGIN_NOTES
Talk though the code, but quickly.
#+END_NOTES

#+begin_src python :session initial-model :exports none
<<mpl>>
import numpy as np

fig = plt.figure(figsize=(10, 3))
#+end_src

#+RESULTS:
: None

#+NAME: double_gaussian_setup
#+begin_src python :exports none :results none
import numpy as np
import astropy.units as u
import astropy.modeling.models as m

NIV_wave = 76.51 * u.nm
NeVIII_wave = 77.04 * u.nm

wave = np.linspace(start=76, stop=77.5, num=1000) * u.nm

initial_model = (
    m.Gaussian1D(amplitude=1*u.count, mean=NIV_wave, stddev=0.06 * u.nm) +
    m.Gaussian1D(amplitude=1*u.count, mean=NeVIII_wave, stddev=0.04 * u.nm)
)
#+end_src

#+begin_src python :results graphics file output :file ./images/generated/initial_model.svg :session initial-model :noweb yes
<<double_gaussian_setup>>

plt.plot(wave, initial_model(wave))
#+end_src

#+RESULTS:
[[file:./images/generated/initial_model.svg]]

* But it's too slow!
:PROPERTIES:
:CUSTOM_ID: how_it_started
:END:

#+BEGIN_NOTES
- The issue of being able to apply a non-linear fitter to a set of models has existed for a long time, since 2015.
- For linear fitters the minima of all models is the minima of every model, not true for non-linear fitters.
- Therefore each non-linear fit needs to be evaluated independently, which is slow.
- The EISPAC developers didn't use astropy modeling because it was too slow.
- It's been a requested feature by the radio astronomy community for a long time.
#+END_NOTES

#+REVEAL_HTML: <div class="two-columns"><div>

[[file:./images/astropy_3670.png]]

#+REVEAL_HTML: </div><div>

[[file:./images/astropy_14610.png]]

#+REVEAL_HTML: </div>

** How slow?
:PROPERTIES:
:CUSTOM_ID: data_scale
:END:
#+begin_NOTES
- These are **very rough** numbers.
- Number of spectra on the high end for all the instruments
#+END_NOTES

| Data                 | Number of Spectra | Time to fit with astropy 6.1 |
|----------------------+-------------------+------------------------------|
| EIS                  | ~ 2.5 Million     | 12 hours                     |
| IRIS                 | ~ 50 Million      | 10 days                      |
| SPICE                | ~ 65 Million      | 13 days                      |
| ALMA                 | ~ 1-100 Million   | 5 hours - 20 days            |
| Largest VISP Dataset | ~ 200 Million     | 40 days                      |

* The Fix

** Speeding up Serial Fitting
:PROPERTIES:
:CUSTOM_ID: speeding_up
:END:

*** Benchmarking
  :PROPERTIES:
  :CUSTOM_ID: benchmarking
  :END:

  #+BEGIN_NOTES
- Talk through the fit code.
- Fitting a double gaussian is a lot faster in serial.
- Following slides talk about how, so just talk about why.
#+END_NOTES

# Setup the Fitter
#+NAME: fitting_setup
#+begin_src python :results none :eval never :exports none
from astropy.modeling import fitting

# Make some data with some noise
y = initial_model(wave)
y *= np.random.normal(0, 0.2, wave.shape)

# Setup the fitter
fit_g = fitting.TRFLSQFitter()
#+end_src

# Build a timeit script, but don't evaluate it or export it
# We evaluate it in two differnent code blocks below with different venvs
#+NAME: run_timeit
#+begin_src python :results none :eval never :exports none :noweb yes
import timeit
import astropy

number_of_fits = 100

setup_script = """\
<<double_gaussian_setup>>
<<fitting_setup>>
"""

time_taken = min(timeit.repeat("fit_g(initial_model, wave, y)", setup=setup_script, number=number_of_fits, repeat=10))
print(f"Running {number_of_fits} fits with astropy {astropy.__version__} took {time_taken:1.5f}s")
#+end_src

# Export the timeit script to the slide in a pretty way
#+begin_src python :eval never :exports code :noweb yes
<<double_gaussian_setup>>
#+END_SRC
#+begin_src python :eval never :exports code :noweb yes
<<fitting_setup>>
<<fit_initial_model>>
# Fit the model
fit_g(initial_model, wave, y)
#+end_src

# Run both versions of the timeit script
#+begin_src python :python .venv-before/bin/python :noweb yes :exports results :results output :eval no-export
<<run_timeit>>
#+end_src

#+RESULTS:
: Running 100 fits with astropy 6.1.0 took 1.30462s

#+begin_src python :noweb yes :exports results :results output :eval no-export
<<run_timeit>>
#+end_src

#+RESULTS:
: Running 100 fits with astropy 7.1.0 took 0.80092s

**\approx3x faster**

*** Improvements to Serial Fixes
:PROPERTIES:
:CUSTOM_ID: serial-fixes
:END:

#+REVEAL_HTML: <div class='two-columns'><div>

[[file:./images/serial_prs/16670.png]]

#+REVEAL_HTML: </div><div>

[[file:./images/serial_prs/16677.png]]

#+REVEAL_HTML: </div></div>

#+attr_html: :width 50%
[[file:./images/serial_prs/16673.png]]

*** Analytical Derivatives of Compound Models
:PROPERTIES:
:CUSTOM_ID: derivs
:END:

#+attr_html: :width 60%
[[file:./images/serial_prs/17034.png]]

** Fitting in Parallel
:PROPERTIES:
:CUSTOM_ID: parallel-fitter
:END:

#+REVEAL_HTML: <div class='two-columns'><div>
#+attr_html: :width 60%
[[file:./images/Dask-Logo-lockup-Primary.svg]]

#+BEGIN_QUOTE
Dask is a Python library for parallel and distributed computing.
#+END_QUOTE

It can scale from your laptop to a HPC cluster or cloud providers.

#+ATTR_REVEAL: :frag t
**To use astropy's parallel fitting on a single machine, you need to know almost nothing about dask!**


#+REVEAL_HTML: </div><div>
#+attr_html: :style margin-bottom:0px; margin-top:-20px; :width 80%
[[file:./images/parallel_prs/16696.png]]
#+attr_html: :style margin-bottom:0px; margin-top:-20px; :width 80%
[[file:./images/parallel_prs/16812.png]]
#+attr_html: :style margin-bottom:0px; margin-top:-20px; :width 80%
[[file:./images/parallel_prs/17033.png]]
#+REVEAL_HTML: </div></div>


** Show me the Fitting
:PROPERTIES:
:CUSTOM_ID: demo
:END:
#+BEGIN_NOTES
- In this example we are fitting ~95,000 spectra
#+END_NOTES

#+begin_src python :session demo :results output :eval no-export :exports none :tangle yes :noweb yes
<<mpl>>
import warnings
warnings.simplefilter("ignore")

from astropy.modeling.fitting import parallel_fit_dask, TRFLSQFitter
import astropy.modeling.models as m
import astropy.units as u
import matplotlib.pyplot as plt
import numpy as np

import dask.distributed
client = dask.distributed.Client('127.0.0.1:9999')
print(client)
#+end_src

#+RESULTS:
: <Client: 'tcp://127.0.0.1:9999' processes=16 threads=16, memory=31.27 GiB>


#+begin_src python :session demo :results output :eval no-export :tangle yes
from sunraster.instr.spice import read_spice_l2_fits

spice = read_spice_l2_fits("./demo/solo_L2_spice-n-ras_20220402T031537_V22_100663994-000.fits")["Ne VIII 770 - Peak"]
spice = spice[0, :, 120:-120, :]
print(spice)
#+end_src

#+RESULTS:
: SpectrogramCube
: ---------------
: Time Period: ['2022-04-02 03:15:39.607' '2022-04-02 03:29:34.357']
: Instrument axes: ['spectral' 'slit' 'slit step']
: Pixel dimensions: (50, 592, 160)
: Longitude range: [-2512.60717534 -1838.1924016 ] arcsec
: Latitude range: [281.39944631 967.91604093] arcsec
: Spectral range: [7.68202290e-08 7.72980623e-08] m
: Data unit: W / (nm sr m2)

#+begin_src python :session demo :results none :eval no-export :exports none :tangle yes
spice.meta = dict(spice.meta)
#+END_SRC

#+begin_src python :session demo :results output :eval no-export :tangle yes
wl_sum = spice.rebin((-1, 1, 1), operation=np.sum).squeeze()
print(wl_sum)
#+end_src

#+RESULTS:
: SpectrogramCube
: ---------------
: Time Period: ['2022-04-02 03:15:39.607' '2022-04-02 03:29:34.357']
: Instrument axes: ['spectral' 'slit' 'slit step']
: Pixel dimensions: (592, 160)
: Longitude range: [-2512.60717534 -1838.1924016 ] arcsec
: Latitude range: [281.39944631 967.91604093] arcsec
: Spectral range: None
: Data unit: W / (nm sr m2)
** 
:PROPERTIES:
:CUSTOM_ID: final_model_setup
:END:
#+begin_src python :session demo :eval no-export :results output :tangle yes
ne_viii_wave = 77.04 * u.nm

ne_viii_model = (
    m.Const1D(amplitude=0.1 * spice.unit) +
    m.Gaussian1D(amplitude=4 * spice.unit, mean=ne_viii_wave, stddev=0.03 * u.nm)
)
print(ne_viii_model)
#+end_src

#+RESULTS:
#+begin_example
Model: CompoundModel
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Expression: [0] + [1]
Components: 
    [0]: <Const1D(amplitude=0.1 W / (nm sr m2))>

    [1]: <Gaussian1D(amplitude=4. W / (nm sr m2), mean=77.04 nm, stddev=0.03 nm)>
Parameters:
     amplitude_0    amplitude_1   mean_1 stddev_1
    W / (nm sr m2) W / (nm sr m2)   nm      nm   
    -------------- -------------- ------ --------
               0.1            4.0  77.04     0.03
#+end_example

** 
:PROPERTIES:
:CUSTOM_ID: final_fit
:END:
#+begin_src python :session demo :results output :eval no-export :tangle yes
ne_viii_fit = parallel_fit_dask(
                  data=spice,
                  model=ne_viii_model,, operation=np.sum
                  fitter=TRFLSQFitter(),
                  fitting_axes=0,
                  fitter_kwargs={"filter_non_finite": True}, # Filter out non-finite values,
                  scheduler="default",
              )
print(ne_viii_fit)

#+end_src

#+RESULTS:
#+begin_example
Model: CompoundModel
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Expression: [0] + [1]
Components: 
    [0]: <Const1D(amplitude=[[-0.01186777, -0.04243589, -0.03180571, ..., -0.00036079,  0.03496337, 0.05961642], [-0.14270691, -0.12905839, -0.14624846, ..., -0.14334128, -0.05594947, 0.03208918], [-0.01989729, -0.2431361 , -0.00001996, ..., -0.11942552,  0.07220234, 0.04301093], ..., [-0.04874417, -0.02015991,  0.14161219, ...,  0.07509156,  0.08982525, 0.04636003], [ 0.01019354, -0.16298965,  0.15877228, ...,  0.12776969,  0.1193767 , 0.01180686], [ 0.12107636, -0.13201061,  0.21371312, ...,  0.09372002,  0.08507842, 0.14460027]] W / (nm sr m2))>

    [1]: <Gaussian1D(amplitude=[[1.19132615, 0.82196006, 0.97784668, ..., 1.02610904, 0.71653108, 1.51190864], [1.00756516, 0.94365588, 1.12815933, ..., 1.24061097, 1.02942899, 1.35983955], [0.809575  , 1.21632214, 0.8736834 , ..., 1.40974561, 1.40700438, 1.33264445], ..., [2.00584294, 1.62791731, 2.58334974, ..., 1.25441368, 1.26217819, 0.77680149], [2.0333365 , 1.73636002, 2.91476763, ..., 1.26140381, 1.19989641, 1.0181316 ], [2.39278912, 2.1577881 , 3.15922599, ..., 1.3036854 , 1.86577543, 2.69302212]] W / (nm sr m2), mean=[[0.00000008, 0.00000008, 0.00000008, ..., 0.00000008, 0.00000008, 0.00000008], [0.00000008, 0.00000008, 0.00000008, ..., 0.00000008, 0.00000008, 0.00000008], [0.00000008, 0.00000008, 0.00000008, ..., 0.00000008, 0.00000008, 0.00000008], ..., [0.00000008, 0.00000008, 0.00000008, ..., 0.00000008, 0.00000008, 0.00000008], [0.00000008, 0.00000008, 0.00000008, ..., 0.00000008, 0.00000008, 0.00000008], [0.00000008, 0.00000008, 0.00000008, ..., 0.00000008, 0.00000008, 0.00000008]] m, stddev=[[0., 0., 0., ..., 0., 0., 0.], [0., 0., 0., ..., 0., 0., 0.], [0., 0., 0., ..., 0., 0., 0.], ..., [0., 0., 0., ..., 0., 0., 0.], [0., 0., 0., ..., 0., 0., 0.], [0., 0., 0., ..., 0., 0., 0.]] m)>
Parameters:
                    amplitude_0                                amplitude_1                ...                     stddev_1                   
                   W / (nm sr m2)                             W / (nm sr m2)              ...                        m                       
    -------------------------------------------- ---------------------------------------- ... -----------------------------------------------
    -0.011867771410507323 .. 0.14460026515655722 1.1913261479082256 .. 2.6930221157273833 ... 2.9275851812115964e-11 .. 5.208923916070005e-12
#+end_example
** 
:PROPERTIES:
:CUSTOM_ID: distributed_dashboard
:END:

#+REVEAL_HTML: <video data-src="./images/distributed.webm" data-autoplay></video>
** 
:PROPERTIES:
:CUSTOM_ID: peak_shift
:END:
Calculate the doppler veloicty from the resultant model parameters.
#+begin_src python :session demo :results output :eval no-export :tangle yes
peak_shift = ne_viii_fit.mean_1.quantity.to(u.km/u.s, equivalencies=u.doppler_optical(ne_viii_wave))
#+end_src

** 
:PROPERTIES:
:CUSTOM_ID: final_plot
:END:
#+begin_src python :session demo :tangle yes :eval no-export :results graphics file output :file ./images/final_demo.svg :exports results
from astropy.visualization import ImageNormalize, AsinhStretch

peak_shift = ne_viii_fit.mean_1.quantity.to(u.km/u.s, equivalencies=u.doppler_optical(ne_viii_wave))

fig, axs = plt.subplots(ncols=2, subplot_kw=dict(projection=wl_sum), figsize=(9, 4.5))
fig.suptitle(f"SPICE - {spice.meta["EXTNAME"]} - {spice.meta["DATE-AVG"]}")

norm = ImageNormalize(wl_sum.data, stretch=AsinhStretch(0.05))
im = wl_sum.plot(axes=axs[0], norm=norm)
fig.colorbar(axs[0].get_images()[0], ax=axs[0], extend="both", label=f"{wl_sum.unit:latex}", shrink=0.8)
axs[0].set_title("Data (summed over wavelength)", pad=40)

g_max = np.percentile(np.abs(peak_shift.value), 98)
im_mean = axs[1].imshow(peak_shift.value, cmap="coolwarm", vmin=-g_max, vmax=g_max)
fig.colorbar(im_mean, ax=axs[1], extend="both", label=f"Velocity from Doppler shift [{peak_shift.unit:latex}]", shrink=0.8)
axs[1].set_title(f"Ne VIII ({ne_viii_wave:latex})", pad=40)

for ax in axs:
    ax.set_aspect(spice.meta["CDELT2"] / spice.meta["CDELT1"])
    ax.coords[0].set_ticklabel(exclude_overlapping=True)
    ax.coords[0].set_axislabel("Helioprojective Longitude")
    ax.coords[1].set_axislabel("Helioprojective Latitude")
    ax.coords[2].set_axislabel("Time [s]")
    ax.coords[2].set_ticklabel(exclude_overlapping=True)
    ax.coords[0].grid(False)
    ax.coords[1].grid(False)
    ax.coords[2].grid(False)

fig.tight_layout()
#+end_src

#+RESULTS:
[[file:./images/final_demo.svg]]

* Thanks!
:PROPERTIES:
:CUSTOM_ID: thanks
:END:

Thanks to the Solar Orbiter/SPICE team via NASA cooperative agreement 80NSSC21M0180, who funded this.

Thanks to various members of the Astropy and SunPy communities for their feedback and review.

**Links**

- Slides - [[https://cadair.github.io/hinode-iris-2025-astropy-modeling]]
- SPICE Fitting Tutorial - ???
- Astropy Documentation - [[https://docs.astropy.org/en/stable/modeling/parallel-fitting.html]]
